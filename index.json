{"project": "gundam", "project_url": "https://github.com/samotracio/gundam", "show_commit_url": "https://github.com/samotracio/gundam/commit/", "hash_length": 8, "revision_to_hash": {"0": "bec21ffdc93b29cb3ceeccaf2dd568e1727c4334", "2": "1d0f774ced6c124f86332da9b01fe6adc208da3e", "4": "2af9cd1ff26384dc350f16f1c0742cdddc0a951c", "5": "7394f5266646ae12558bd63597ca3906dd408461", "6": "639ab7d6893c6908e895a3c4f6fa033655d44bc7", "7": "3a8f52342878bc3b52b627b062a7aeb61e577ac1", "8": "c3d0c1dd7520f4a63ba612636d7262320d07a92b", "9": "0e91f521cb450e69149e374c0bcf0d443942b4ed", "10": "05ae9e0d6f637955047271ec94177ff33e196b03", "11": "8425931aa0bb1e8b85f632ed7362d37c0c0c189f", "12": "a56d3eb603f29c456707ff00f81472f47213c6a9", "13": "505ece33b62f4cce48521aed842fdcec12dd2756", "14": "f90f5c60f5745391a25e842d8f02a52fb7b6cac0", "15": "7ebeaf669d2f170447a45b5ed2ce41af625ab228", "16": "f4a5cf1a29dbe7c0cd0ef2ea9b4b7382737cfeeb", "17": "9112fb001a12d33f4a622fe6b97c00362887132e", "18": "dd8a446455a3948a1a4458a86263fd5ad6de6c86", "19": "785e60bfb583e8cc211282efd97539c8514c15c2", "20": "bf0cfefd5d8b6dfb02b5784796bd81ed02c05b05", "21": "3a133a1306872c684965f3bbc7f2574d4df81d1f", "22": "31aefae6e0496ae6c084ad0acb26d747a543cd28", "23": "c1bc917be2db34a2e85e1943b090b2f2a01c45bc", "24": "fb93f8ad09dc397137aec9e07d4f79e5e93a2cf4", "25": "b1e0fca957ad5a6df25c48c7798d537349f200ff", "26": "d650a3b5385d0b25a8f1d248d66a1eb51c3b5fe4", "27": "419aecd168ca88dc3dcbd23839ec1d1eb4ce91e7", "28": "ee96b49486fcafc73f834bcceed91fe64b4ce075", "29": "c626761edbfc37dea9ac62dccc8e78a9a8692069", "30": "6649c006f2a6ce049f810081c10b18ff8fa59be3", "31": "b269ddcd59917ddf97aab97a61e6da7f79163263", "32": "b65dbc6ccb2cb1805792f5c19fea0f9698a2295d", "33": "0d8b6b3b6d4cf2cf298ad520271bfed4dd6f112e", "34": "6fcf0988be7aebe3f8c9606ffcfa262f97f65e02", "35": "afc145fb6a9a78b6eef9c88083a2298ceb56ce3a", "36": "a4b62a96fa2ebea3afaf03aea2f0df57d28d93d2", "39": "ab2651680f99b97e114c9581d49c6c0244546277"}, "revision_to_date": {"0": 1516047609000, "2": 1516048364000, "4": 1516048502000, "5": 1516049357000, "6": 1516100875000, "7": 1516101575000, "8": 1516101925000, "9": 1516103093000, "10": 1516104525000, "11": 1516105316000, "12": 1516105611000, "13": 1516106087000, "14": 1516109572000, "15": 1516109862000, "16": 1516110034000, "17": 1516110267000, "18": 1516110650000, "19": 1516111742000, "20": 1517346927000, "21": 1517347746000, "22": 1517348042000, "23": 1517403262000, "24": 1517404143000, "25": 1517404183000, "26": 1517404235000, "27": 1517404673000, "28": 1517404779000, "29": 1517405778000, "30": 1517407350000, "31": 1517411418000, "32": 1517485554000, "33": 1518034462000, "34": 1518034783000, "35": 1518034814000, "36": 1519841496000, "39": 1717616523000}, "params": {"machine": ["gh-runner"], "python": ["3.10"], "Cython": [""], "build": [""], "packaging": [""], "branch": ["HEAD"]}, "graph_param_list": [{"machine": "gh-runner", "python": "3.10", "Cython": "", "build": "", "packaging": "", "branch": "HEAD"}], "benchmarks": {"benchmarks.time_example_lrg": {"code": "def time_example_lrg():\n    # DEFINE PARAMETERS  ==========================================================\n    galf = f'{TEST_DATA_DIR}/DR7-lrg.fits'  # Galaxy sample\n    ranf = f'{TEST_DATA_DIR}/DR7-lrg-rand.fits'  # Random sample\n    outfn = f'{TEST_DATA_DIR}/ex_LRG'  # Name for output files\n\n    par = gun.packpars(kind='pcf', file=galf, file1=ranf, outfn=outfn)\n    par.autogrid = False  # Automatic SK grid size\n    par.mxh1 = 60  # SK size in dec\n    par.mxh2 = 240  # SK size in ra\n    par.mxh3 = 24  # SK size in z\n    par.nsepp = 78  # Number of bins of projected separation rp\n    par.seppmin = 0.01  # Minimum rp in Mpc/h\n    par.dsepp = 0.5  # Bin size of rp (in log space)\n    par.logsepp = 0  # Use linear bins instead of log bins\n    par.nsepv = 60  # Number of bins of LOS separation pi\n    par.dsepv = 0.5  # Bin size of pi (in linear space)\n    par.doboot = True  # Do bootstrap error estimates\n    par.omegam = 0.25  # Omega matter\n    par.omegal = 0.75  # Omega lambda\n    par.h0 = 100  # Hubble constant [km/s/Mpc]\n    par.calcdist = True  # Calculate comov. dist.\n    par.estimator = 'LS'  # Choose Landy-Szalay estimator for the PCF\n    par.description = 'LumRedGxs'  # Description label\n\n    # READ DATA FILES  ============================================================\n    print('Reading file: ', galf)\n    gals = Table.read(galf)\n    if 'wei' not in gals.colnames:  gals['wei'] = 1.  # If not present, set weights to 1\n\n    print('Reading file: ', ranf)\n    rans = Table.read(ranf)\n    if 'wei' not in rans.colnames:  rans['wei'] = 1.  # If not present, set weights to 1\n\n    # ==============================================================================\n    # CALCULATE THE CORRELATION\n    nt = 4  # Threads to use\n    gun.pcf(gals, rans, par, nthreads=nt)\n    # ==============================================================================", "min_run_count": 2, "name": "benchmarks.time_example_lrg", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b64b8a156f73eec548a3782554c5e4fc9eba63d2bab6e883599dfb24b58ea266", "warmup_time": -1}}, "machines": {"gh-runner": {"machine": "gh-runner", "version": 1}}, "tags": {}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}